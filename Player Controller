using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[System.Serializable]
public class Boundary
{
    public float xMin, xMax, zMin, zMax;
}

public class PlayerController : MonoBehaviour
{
    public float speed;
    public float tilt;
    public Boundary boundary;

    private Rigidbody rb;
    public GameObject shot;
    public Transform shotSpawn;
    public float fireRate;

    private float nextFire;
    private AudioSource audioSource;


    private bool doOnce;
    [SerializeField] private float mainTimer;

    public GameObject player;
    private bool active;
    public float multiplier1 = 2f;
    public float multiplier2 = 3f;
    public float duration = 3f;


    private void Start()
    {
        rb = GetComponent<Rigidbody>();
        audioSource = GetComponent<AudioSource>();

        
        doOnce = true;
        active = false;

    }

    void Update()
    {
        if (Input.GetButton("Fire1") && Time.time > nextFire)
        {
            nextFire = Time.time + fireRate;
            Instantiate(shot, shotSpawn.position, shotSpawn.rotation);
            audioSource.Play();
        }
    }

    void FixedUpdate()
    {
        float moveHorizontal = Input.GetAxis("Horizontal");
        float moveVertical = Input.GetAxis("Vertical");

        Vector3 movement = new Vector3(moveHorizontal, 0.0f, moveVertical);
        rb.velocity = movement * speed;

        rb.position = new Vector3
        (
             Mathf.Clamp(rb.position.x, boundary.xMin, boundary.xMax),
             0.0f,
             Mathf.Clamp(rb.position.z, boundary.zMin, boundary.zMax)
        );

        rb.rotation = Quaternion.Euler(0.0f, 0.0f, rb.velocity.x * -tilt);
    }

    private void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("Pickup") && doOnce == true && active == false)
        {
            Destroy(other.gameObject);
            doOnce = false;
            active = true;
            StartCoroutine(powerup());
        }

    }
    IEnumerator powerup()
    {
       

        speed *= multiplier1;
        fireRate /= multiplier2;

        yield return new WaitForSeconds(duration);

        speed /= multiplier1;
        fireRate *= multiplier2;
        doOnce = true;
        active = false;

    }
}
    
